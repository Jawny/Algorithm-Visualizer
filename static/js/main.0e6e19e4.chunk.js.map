{"version":3,"sources":["node/Node.js","algorithms/BreadthFirstSearch.js","algorithms/DepthFirstSearch.js","grid/Grid.js","App.js","index.js"],"names":["Node","isStart","isEnd","isVisited","classes","className","searchThroughNeighboursHelper","node","grid","visited","queue","x","y","length","has","add","push","BFS","Set","curr","res","shift","DFS","i","j","NODE_START_ROW","NODE_START_COL","NODE_END_ROW","NODE_END_COL","Grid","useState","setGrid","useEffect","createGrid","Array","createSpot","val","Spot","this","g","h","f","runAlgorithm","resultNodes","interval","setInterval","newGrid","JSON","parse","stringify","clearInterval","clearGrid","gridWithNode","map","rowOfSpots","rowIndex","key","spot","spotIndex","deepCopyAndSetGridState","onClick","type","placeholder","name","onChange","event","target","value","isNaN","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e6e19e4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Node.css\";\r\n\r\nconst Node = ({ isStart, isEnd, isVisited }) => {\r\n  let classes = \"\";\r\n  if (isStart) {\r\n    classes += \"node-start\";\r\n  } else if (isEnd) {\r\n    classes += \"node-end\";\r\n  } else if (isVisited) {\r\n    classes += \"node-visited\";\r\n  }\r\n\r\n  return <div className={`node ${classes}`}></div>;\r\n};\r\nexport default Node;\r\n","function BFS(node, grid) {\r\n  let queue = [node];\r\n  let visited = new Set();\r\n  visited.add(node);\r\n  let res = [];\r\n\r\n  let curr;\r\n  while (queue.length !== 0) {\r\n    curr = queue.shift();\r\n    res.push(curr);\r\n    searchThroughNeighboursHelper(curr, grid, visited, queue);\r\n  }\r\n  return res;\r\n}\r\nfunction searchThroughNeighboursHelper(node, grid, visited, queue) {\r\n  let x = node.x;\r\n  let y = node.y;\r\n\r\n  // add right neighbour\r\n  if (x < grid[0].length - 1 && !visited.has(grid[x + 1][y])) {\r\n    visited.add(grid[x + 1][y]);\r\n    queue.push(grid[x + 1][y]);\r\n  }\r\n  // add bottom neighbour\r\n  if (y < grid.length - 1 && !visited.has(grid[x][y + 1])) {\r\n    visited.add(grid[x][y + 1]);\r\n    queue.push(grid[x][y + 1]);\r\n  }\r\n  // add left neighbour\r\n  if (x > 0 && !visited.has(grid[x - 1][y])) {\r\n    visited.add(grid[x - 1][y]);\r\n    queue.push(grid[x - 1][y]);\r\n  }\r\n  // add top neighbour\r\n  if (y > 0 && !visited.has(grid[x][y - 1])) {\r\n    visited.add(grid[x][y - 1]);\r\n    queue.push(grid[x][y - 1]);\r\n  }\r\n}\r\n\r\nexport default BFS;\r\n","function DFS(node, grid) {\r\n  let visited = new Set();\r\n  let res = [];\r\n\r\n  searchThroughNeighboursHelper(grid, res, visited, node.x, node.y);\r\n  return res;\r\n}\r\n\r\nfunction searchThroughNeighboursHelper(grid, res, visited, i, j) {\r\n  if (\r\n    i >= 0 &&\r\n    j >= 0 &&\r\n    i < grid.length &&\r\n    j < grid[0].length &&\r\n    !visited.has(grid[i][j])\r\n  ) {\r\n    visited.add(grid[i][j]);\r\n    res.push(grid[i][j]);\r\n    searchThroughNeighboursHelper(grid, res, visited, i + 1, j);\r\n    searchThroughNeighboursHelper(grid, res, visited, i - 1, j);\r\n    searchThroughNeighboursHelper(grid, res, visited, i, j + 1);\r\n    searchThroughNeighboursHelper(grid, res, visited, i, j - 1);\r\n  }\r\n}\r\n\r\nexport default DFS;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Node from \"../node/Node\";\r\nimport \"./Grid.css\";\r\nimport BFS from \"../algorithms/BreadthFirstSearch\";\r\nimport DFS from \"../algorithms/DepthFirstSearch\";\r\n\r\nconst cols = 20;\r\nconst rows = 20;\r\n\r\nlet NODE_START_ROW = 10;\r\nlet NODE_START_COL = 5;\r\nlet NODE_END_ROW = 10;\r\nlet NODE_END_COL = 19;\r\n\r\nconst Grid = () => {\r\n  const [grid, setGrid] = useState([]);\r\n\r\n  useEffect(() => {\r\n    createGrid();\r\n  }, []);\r\n\r\n  const createGrid = () => {\r\n    const grid = new Array(rows);\r\n    for (let i = 0; i < rows; i++) {\r\n      grid[i] = new Array(cols);\r\n    }\r\n    createSpot(grid);\r\n    setGrid(grid);\r\n  };\r\n\r\n  const createSpot = (grid) => {\r\n    let val = 0;\r\n    // create spots\r\n    for (let i = 0; i < rows; i++) {\r\n      for (let j = 0; j < cols; j++) {\r\n        grid[i][j] = new Spot(i, j, val);\r\n        val += 1;\r\n      }\r\n    }\r\n  };\r\n\r\n  // Spot constructor\r\n  function Spot(i, j, val) {\r\n    this.x = i;\r\n    this.y = j;\r\n    this.g = 0;\r\n    this.h = 0;\r\n    this.f = 0;\r\n    this.val = val;\r\n    this.isVisited = false;\r\n    this.isStart = this.x === NODE_START_ROW && this.y === NODE_START_COL;\r\n    this.isEnd = this.x === NODE_END_ROW && this.y === NODE_END_COL;\r\n  }\r\n\r\n  // resultNodes = result steps to play back algorithm\r\n  const runAlgorithm = (resultNodes) => {\r\n    let interval = setInterval(function () {\r\n      if (\r\n        resultNodes[0] === grid[NODE_END_ROW][NODE_END_COL] ||\r\n        resultNodes.length === 0\r\n      ) {\r\n        clearInterval(interval);\r\n        return;\r\n      }\r\n      let curr = resultNodes.shift();\r\n\r\n      let newGrid = [];\r\n\r\n      for (let i = 0; i < grid.length; i++) {\r\n        newGrid.push([]);\r\n        for (let j = 0; j < grid[0].length; j++) {\r\n          newGrid[i].push(0);\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < rows; i++) {\r\n        for (let j = 0; j < cols; j++) {\r\n          newGrid[i][j] = JSON.parse(JSON.stringify(grid[i][j]));\r\n        }\r\n      }\r\n\r\n      if (!curr.isStart && !curr.isEnd) {\r\n        grid[curr.x][curr.y].isVisited = true;\r\n        newGrid[curr.x][curr.y].isVisited = true;\r\n      }\r\n      setGrid(newGrid);\r\n    }, 50);\r\n  };\r\n\r\n  //clear the grid and reset it to default\r\n  const clearGrid = () => {\r\n    let newGrid = [];\r\n\r\n    for (let i = 0; i < grid.length; i++) {\r\n      newGrid.push([]);\r\n      for (let j = 0; j < grid[0].length; j++) {\r\n        newGrid[i].push(0);\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n      for (let j = 0; j < cols; j++) {\r\n        grid[i][j].isVisited = false;\r\n        newGrid[i][j] = JSON.parse(JSON.stringify(grid[i][j]));\r\n      }\r\n    }\r\n\r\n    setGrid(newGrid);\r\n  };\r\n\r\n  // Create grid with nodes\r\n  const gridWithNode = (\r\n    <div className=\"d-inline-block\">\r\n      <div>\r\n        {grid.map((rowOfSpots, rowIndex) => {\r\n          return (\r\n            <div key={rowIndex} className=\"row\">\r\n              {rowOfSpots.map((spot, spotIndex) => {\r\n                // the line below this comment is same as the 3 commented lines below\r\n                const { isStart, isEnd, isVisited } = spot;\r\n                // const isStart = spot.isStart;\r\n                // const isEnd = spot.isEnd;\r\n                // const isVisited = spot.isVisited;\r\n                return (\r\n                  <Node\r\n                    key={spotIndex}\r\n                    isStart={isStart}\r\n                    isEnd={isEnd}\r\n                    isVisited={isVisited}\r\n                  />\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n  // Change start node Row position\r\n  const handleStartChangeRow = (event) => {\r\n    // Set current starting node to false\r\n    grid[NODE_START_ROW][NODE_START_COL].isStart = false;\r\n    // check if event value is valid\r\n    if (event.target.value === \"\" || isNaN(event.target.value)) {\r\n    } else {\r\n      NODE_START_ROW = event.target.value;\r\n    }\r\n    // set new start row node\r\n    grid[NODE_START_ROW][NODE_START_COL].isStart = true;\r\n    deepCopyAndSetGridState(grid);\r\n  };\r\n\r\n  // Change start node Col position\r\n  const handleStartChangeCol = (event) => {\r\n    // Set current starting node to false\r\n    grid[NODE_START_ROW][NODE_START_COL].isStart = false;\r\n    // check if event value is valid\r\n    if (event.target.value === \"\" || isNaN(event.target.value)) {\r\n    } else {\r\n      NODE_START_COL = event.target.value;\r\n    }\r\n    // set new start col node\r\n    grid[NODE_START_ROW][NODE_START_COL].isStart = true;\r\n    deepCopyAndSetGridState(grid);\r\n  };\r\n  // Change end node Row position\r\n  const handleEndChangeRow = (event) => {\r\n    // Set current starting node to false\r\n    grid[NODE_END_ROW][NODE_END_COL].isEnd = false;\r\n    // check if event value is valid\r\n    if (event.target.value === \"\" || isNaN(event.target.value)) {\r\n    } else {\r\n      NODE_END_ROW = event.target.value;\r\n    }\r\n    // set new start row node\r\n    grid[NODE_END_ROW][NODE_END_COL].isEnd = true;\r\n    deepCopyAndSetGridState(grid);\r\n  };\r\n  // Change end node Col position\r\n  const handleEndChangeCol = (event) => {\r\n    // Set current end node to false\r\n    grid[NODE_END_ROW][NODE_END_COL].isEnd = false;\r\n    // check if event value is valid\r\n    if (event.target.value === \"\" || isNaN(event.target.value)) {\r\n    } else {\r\n      NODE_END_COL = event.target.value;\r\n    }\r\n    // set new end col node\r\n    grid[NODE_END_ROW][NODE_END_COL].isEnd = true;\r\n    deepCopyAndSetGridState(grid);\r\n  };\r\n\r\n  const deepCopyAndSetGridState = (grid) => {\r\n    let newGrid = [];\r\n    for (let i = 0; i < grid.length; i++) {\r\n      newGrid.push([]);\r\n      for (let j = 0; j < grid[0].length; j++) {\r\n        newGrid[i].push(0);\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n      for (let j = 0; j < cols; j++) {\r\n        newGrid[i][j] = JSON.parse(JSON.stringify(grid[i][j]));\r\n      }\r\n    }\r\n    setGrid(newGrid);\r\n  };\r\n\r\n  return (\r\n    <div className=\"screen\">\r\n      <h1> Algorithm Visualizer </h1>\r\n      <div>{gridWithNode}</div>\r\n      <button\r\n        className=\"btn btn-primary mr-1\"\r\n        onClick={() => {\r\n          clearGrid();\r\n          runAlgorithm(BFS(grid[NODE_START_ROW][NODE_START_COL], grid));\r\n        }}\r\n      >\r\n        Breadth First Search\r\n      </button>\r\n      <button\r\n        className=\"btn btn-primary mr-1\"\r\n        onClick={() => {\r\n          clearGrid();\r\n          runAlgorithm(DFS(grid[NODE_START_ROW][NODE_START_COL], grid));\r\n        }}\r\n      >\r\n        {\" \"}\r\n        Depth First Search\r\n      </button>\r\n      <button\r\n        className=\"btn btn-primary mr-1\"\r\n        onClick={() => {\r\n          clearGrid();\r\n        }}\r\n      >\r\n        Clear Grid\r\n      </button>\r\n      <div>\r\n        <div className=\"pull-left\">\r\n          <label>\r\n            Start position\r\n            {/* start node row */}\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Start Node x-coord\"\r\n              name=\"x-coord\"\r\n              onChange={handleStartChangeRow}\r\n            />\r\n            {/* start node col */}\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Start Node y-coord\"\r\n              name=\"y-coord\"\r\n              onChange={handleStartChangeCol}\r\n            />\r\n          </label>\r\n        </div>\r\n        <label>\r\n          End Position\r\n          {/* end node row */}\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"End Node x-coord\"\r\n            name=\"x-coord\"\r\n            onChange={handleEndChangeRow}\r\n          />\r\n          {/* end node col */}\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"End Node y-coord\"\r\n            name=\"y-coord\"\r\n            onChange={handleEndChangeCol}\r\n          />\r\n        </label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Grid from \"./grid/Grid\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}